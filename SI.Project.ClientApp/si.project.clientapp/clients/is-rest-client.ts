//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export module back_end {

    export class Client {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            this.http = http ? http : window as any;
            this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
        }
    
        /**
         * @return Success
         */
        apiUserDetailsGet(): Promise<GetUserDetailsDto> {
            let url_ = this.baseUrl + "/api/UserDetails";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processApiUserDetailsGet(_response);
            });
        }
    
        protected processApiUserDetailsGet(response: Response): Promise<GetUserDetailsDto> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GetUserDetailsDto.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<GetUserDetailsDto>(null as any);
        }
    
        /**
         * @param body (optional) 
         * @return Success
         */
        apiUserDetailsPost(body: PostUserDetailsDto | undefined): Promise<void> {
            let url_ = this.baseUrl + "/api/UserDetails";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(body);
    
            let options_: RequestInit = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processApiUserDetailsPost(_response);
            });
        }
    
        protected processApiUserDetailsPost(response: Response): Promise<void> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<void>(null as any);
        }
    
        /**
         * @param body (optional) 
         * @return Success
         */
        apiUserDetailsPut(body: PutUserDetailsDto | undefined): Promise<void> {
            let url_ = this.baseUrl + "/api/UserDetails";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(body);
    
            let options_: RequestInit = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processApiUserDetailsPut(_response);
            });
        }
    
        protected processApiUserDetailsPut(response: Response): Promise<void> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<void>(null as any);
        }
    
        /**
         * @return Success
         */
        apiWeatherForecast(): Promise<WeatherForecast[]> {
            let url_ = this.baseUrl + "/api/WeatherForecast";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processApiWeatherForecast(_response);
            });
        }
    
        protected processApiWeatherForecast(response: Response): Promise<WeatherForecast[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(WeatherForecast.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<WeatherForecast[]>(null as any);
        }
    }
    
    export class DateOnly implements IDateOnly {
        year?: number;
        month?: number;
        day?: number;
        dayOfWeek?: DayOfWeek;
        readonly dayOfYear?: number;
        readonly dayNumber?: number;
    
        constructor(data?: IDateOnly) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(_data?: any) {
            if (_data) {
                this.year = _data["year"];
                this.month = _data["month"];
                this.day = _data["day"];
                this.dayOfWeek = _data["dayOfWeek"];
                (<any>this).dayOfYear = _data["dayOfYear"];
                (<any>this).dayNumber = _data["dayNumber"];
            }
        }
    
        static fromJS(data: any): DateOnly {
            data = typeof data === 'object' ? data : {};
            let result = new DateOnly();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["year"] = this.year;
            data["month"] = this.month;
            data["day"] = this.day;
            data["dayOfWeek"] = this.dayOfWeek;
            data["dayOfYear"] = this.dayOfYear;
            data["dayNumber"] = this.dayNumber;
            return data;
        }
    }
    
    export interface IDateOnly {
        year?: number;
        month?: number;
        day?: number;
        dayOfWeek?: DayOfWeek;
        dayOfYear?: number;
        dayNumber?: number;
    }
    
    export enum DayOfWeek {
        _0 = 0,
        _1 = 1,
        _2 = 2,
        _3 = 3,
        _4 = 4,
        _5 = 5,
        _6 = 6,
    }
    
    export class GetUserDetailsDto implements IGetUserDetailsDto {
        userId?: string | undefined;
        givenName?: string | undefined;
        lastName?: string | undefined;
        birthDate?: Date | undefined;
        publicKey?: string | undefined;
    
        constructor(data?: IGetUserDetailsDto) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(_data?: any) {
            if (_data) {
                this.userId = _data["userId"];
                this.givenName = _data["givenName"];
                this.lastName = _data["lastName"];
                this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
                this.publicKey = _data["publicKey"];
            }
        }
    
        static fromJS(data: any): GetUserDetailsDto {
            data = typeof data === 'object' ? data : {};
            let result = new GetUserDetailsDto();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["userId"] = this.userId;
            data["givenName"] = this.givenName;
            data["lastName"] = this.lastName;
            data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
            data["publicKey"] = this.publicKey;
            return data;
        }
    }
    
    export interface IGetUserDetailsDto {
        userId?: string | undefined;
        givenName?: string | undefined;
        lastName?: string | undefined;
        birthDate?: Date | undefined;
        publicKey?: string | undefined;
    }
    
    export class PostUserDetailsDto implements IPostUserDetailsDto {
        givenName?: string | undefined;
        lastName?: string | undefined;
        birthDate?: Date | undefined;
        publicKey?: string | undefined;
    
        constructor(data?: IPostUserDetailsDto) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(_data?: any) {
            if (_data) {
                this.givenName = _data["givenName"];
                this.lastName = _data["lastName"];
                this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
                this.publicKey = _data["publicKey"];
            }
        }
    
        static fromJS(data: any): PostUserDetailsDto {
            data = typeof data === 'object' ? data : {};
            let result = new PostUserDetailsDto();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["givenName"] = this.givenName;
            data["lastName"] = this.lastName;
            data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
            data["publicKey"] = this.publicKey;
            return data;
        }
    }
    
    export interface IPostUserDetailsDto {
        givenName?: string | undefined;
        lastName?: string | undefined;
        birthDate?: Date | undefined;
        publicKey?: string | undefined;
    }
    
    export class PutUserDetailsDto implements IPutUserDetailsDto {
        givenName?: string | undefined;
        lastName?: string | undefined;
        birthDate?: Date | undefined;
        publicKey?: string | undefined;
    
        constructor(data?: IPutUserDetailsDto) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(_data?: any) {
            if (_data) {
                this.givenName = _data["givenName"];
                this.lastName = _data["lastName"];
                this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
                this.publicKey = _data["publicKey"];
            }
        }
    
        static fromJS(data: any): PutUserDetailsDto {
            data = typeof data === 'object' ? data : {};
            let result = new PutUserDetailsDto();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["givenName"] = this.givenName;
            data["lastName"] = this.lastName;
            data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
            data["publicKey"] = this.publicKey;
            return data;
        }
    }
    
    export interface IPutUserDetailsDto {
        givenName?: string | undefined;
        lastName?: string | undefined;
        birthDate?: Date | undefined;
        publicKey?: string | undefined;
    }
    
    export class WeatherForecast implements IWeatherForecast {
        date?: DateOnly;
        temperatureC?: number;
        readonly temperatureF?: number;
        summary?: string | undefined;
    
        constructor(data?: IWeatherForecast) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(_data?: any) {
            if (_data) {
                this.date = _data["date"] ? DateOnly.fromJS(_data["date"]) : <any>undefined;
                this.temperatureC = _data["temperatureC"];
                (<any>this).temperatureF = _data["temperatureF"];
                this.summary = _data["summary"];
            }
        }
    
        static fromJS(data: any): WeatherForecast {
            data = typeof data === 'object' ? data : {};
            let result = new WeatherForecast();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date ? this.date.toJSON() : <any>undefined;
            data["temperatureC"] = this.temperatureC;
            data["temperatureF"] = this.temperatureF;
            data["summary"] = this.summary;
            return data;
        }
    }
    
    export interface IWeatherForecast {
        date?: DateOnly;
        temperatureC?: number;
        temperatureF?: number;
        summary?: string | undefined;
    }
    
    export class ApiException extends Error {
        override message: string;
        status: number;
        response: string;
        headers: { [key: string]: any; };
        result: any;
    
        constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }
    
        protected isApiException = true;
    
        static isApiException(obj: any): obj is ApiException {
            return obj.isApiException === true;
        }
    }
    
    function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new ApiException(message, status, response, headers, null);
    }
    
    }